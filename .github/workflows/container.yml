name: Build and Publish Container

on:
  push:
    branches: [ main ]
    tags: [ '*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  version-bump:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      version_changed: ${{ steps.bump.outputs.version_changed }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install -e ".[dev]"

    - name: Determine version increment from merged PR
      id: bump
      run: |
        # Get the merge commit message to find the PR number
        MERGE_MSG=$(git log -1 --pretty=format:"%s")
        echo "Merge message: $MERGE_MSG"
        
        # Extract PR number from merge message
        PR_NUM=$(echo "$MERGE_MSG" | grep -oP "Merge pull request #\K\d+" || echo "")
        
        if [ -z "$PR_NUM" ]; then
          echo "No PR number found in merge commit, skipping version bump"
          echo "version_changed=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Found PR #$PR_NUM"
        
        # Get the branch name that was merged
        BRANCH_NAME=$(gh pr view $PR_NUM --json headRefName --jq '.headRefName')
        echo "Branch name: $BRANCH_NAME"
        
        # Determine version increment based on branch prefix
        if [[ "$BRANCH_NAME" == hotfix/* ]]; then
          INCREMENT_TYPE="patch"
        elif [[ "$BRANCH_NAME" == feature/* ]]; then
          INCREMENT_TYPE="minor"
        elif [[ "$BRANCH_NAME" == release/* ]]; then
          INCREMENT_TYPE="major"
        else
          echo "Branch does not match hotfix/*, feature/*, or release/* pattern, skipping version bump"
          echo "version_changed=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Version increment type: $INCREMENT_TYPE"
        
        # Get current version and increment
        CURRENT_VERSION=$(python scripts/version.py current | cut -d' ' -f3)
        echo "Current version: $CURRENT_VERSION"
        
        # Increment version
        python scripts/version.py $INCREMENT_TYPE
        NEW_VERSION=$(python scripts/version.py current | cut -d' ' -f3)
        
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_changed=true" >> $GITHUB_OUTPUT
        
        # Configure git for commit
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Commit version changes
        git add pyproject.toml stac_mcp/__init__.py stac_mcp/server.py
        git commit -m "chore: bump version to $NEW_VERSION (auto-increment from $BRANCH_NAME branch)"
        git push
        
        # Create and push tag
        git tag "v$NEW_VERSION"
        git push origin "v$NEW_VERSION"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: [version-bump]
    if: always()
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch the latest changes if version was bumped
        ref: ${{ github.event_name == 'push' && needs.version-bump.outputs.version_changed == 'true' && 'main' || github.sha }}

    - name: Set up lowercase image name
      run: echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
        tags: |
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up QEMU (for cross-platform emulation)
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true

    - name: Build and push Container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Containerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max